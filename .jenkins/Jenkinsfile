/*
* NLP Architect Jenkinsfile
*/

/* 
// Constant Variables for Build
static final Map slackColorMap      = [
    'FAILURE': 'danger',
    'UNSTABLE': 'warning',
    'SUCCESS': 'good'
]

// Common Closures for Build
def slackStartMessage = {
    try {
        slackSend message: "Build ${env.JOB_NAME} started (<${env.BUILD_URL}|LINK>)"
    } catch (err) {
        echo "BUILD WARNING - Failed to send Slack Message: ${err}"
    }
}
def slackEndMessage = {
    try {
        slackSend color: slackColorMap[currentBuild.currentResult], message: "Build ${env.JOB_NAME} finished with result: ${currentBuild.currentResult} (<${env.BUILD_URL}|LINK>)"
    } catch (err) {
        echo "BUILD WARNING - Failed to send Slack Message: ${err}"
    }
}
*/

pipeline {
    agent {
        node {
                label 'swarm'
                customWorkspace '/state/ws'
            }
    }
    options {
        timestamps()
    }
    environment { 
        NLP_ARCHITECT_BE = 'CPU'
    }
    stages {
        stage('Checkout') {
            steps {
                deleteDir()
                checkout scm
            }
        }
        stage('Build environment') {
            steps {
                sh 'python3 -m venv .nlp_architect_env'
                sh """
                . .nlp_architect_env/bin/activate
                pip3 install -U pip setuptools h5py
                export NLP_ARCHITECT_BE=CPU
                pip3 install -r requirements.txt
                pip3 install -r dev-requirements.txt
                pip3 install -e .
                """
            }
        }
        stage('Validation') {
            parallel {
                stage('Tests') {
                    steps {
                        sh """
                        . .nlp_architect_env/bin/activate
                        export LC_ALL=en_US.UTF-8
                        export LANG=en_US.UTF-8
                        nlp_architect test
                        """
                    }
                    post {
                        always {
                            junit 'pytest_unit.xml'
                        }
                        failure {
                            script {
                                currentBuild.result = 'FAILURE'
                            }
                        }
                    }
                }
                stage('flake8') {
                    steps {
                        sh """
                        . .nlp_architect_env/bin/activate
                        nlp_architect style --only-flake
                        """
                    }
                    post {
                        failure {
                            script {
                                currentBuild.result = 'FAILURE'
                            }
                        }
                    }
                }
                stage('pylint') {
                    steps {
                        sh """
                        . .nlp_architect_env/bin/activate
                        nlp_architect style --only-pylint
                        """
                    }
                    post {
                        failure {
                            script {
                                currentBuild.result = 'FAILURE'
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        aborted {
            script {
                currentBuild.result = 'FAILURE'
            }
        }
        failure {
            script {
                currentBuild.result = 'FAILURE'
            }
        }
        cleanup {
            deleteDir()
        }
    }
}
